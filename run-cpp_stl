#!/bin/sh -e

. ./config

if [ "$#" -ne 3 ]; then
	echo "$0 <src_dir> <spec_dir> <test_out_dir>"
	exit 1
fi

SRC_DIR="$1"
CPP_SPEC_DIR="$2"
CPP_TEST_OUT_DIR="$3"

OBJ_DIR="$SRC_DIR/bin"
SPEC_CMAKE="$OBJ_DIR/spec_files.cmake"
COMPILED_CMAKE="$OBJ_DIR/compiled_files.cmake"
ABS_CPP_TEST_OUT_DIR="$(pwd)/$CPP_TEST_OUT_DIR"
TEST_DIR=$(pwd)

# Create initial list of files to compile, starting with everything
init_file_lists()
{
	rm -f "$SPEC_CMAKE"
	echo 'set(SPEC_SOURCES' >>"$SPEC_CMAKE"
	find "$CPP_SPEC_DIR" -name '*.cpp' >>"$SPEC_CMAKE"
	echo ')' >>"$SPEC_CMAKE"

	rm -f "$COMPILED_CMAKE"
	echo 'set(KS_SOURCES' >>"$COMPILED_CMAKE"
	find "$SRC_DIR" -name '*.cpp' >>"$COMPILED_CMAKE"
	echo ')' >>"$COMPILED_CMAKE"
}

# Init CMake, generate platform-specific Makefile / project files
init_cmake()
{
	#if [ ! -r Makefile ] && [ ! -r KS_TEST_CPP_STL.sln ]; then
	echo "Using KS_CMAKE_OPTIONS=<$KS_CMAKE_OPTIONS>"
	cmake -DCMAKE_BUILD_TYPE=Debug -DINC1_PATH="$SPEC_CMAKE" -DINC2_PATH="$COMPILED_CMAKE" -DKS_PATH="$SRC_DIR" "$KS_CMAKE_OPTIONS" "$CPP_SPEC_DIR"
	#fi
}

# Compile everything:
# 1. KS runtime part for C++/STL
# 2. Binary format parser sources, generated by KS compiler
# 3. Test specs
compile_everything()
{
	echo 'Building project generated with CMake...'
	if [ -r Makefile ]; then
		LC_ALL=en_US.UTF-8 make -j8 -k >"$ABS_CPP_TEST_OUT_DIR/make.stdout" 2>"$ABS_CPP_TEST_OUT_DIR/make.stderr"
	elif [ -r KS_TEST_CPP_STL.sln ]; then
		msbuild
	else
		echo "No build makefile/project file found, unable to continue."
		ls -al
		exit 1
	fi
}

compile_failures_seq()
{
	echo 'Building project generated with CMake (sequentially)...'
	if [ -r Makefile ]; then
		LC_ALL=en_US.UTF-8 make -k >"$ABS_CPP_TEST_OUT_DIR/make.stdout" 2>"$ABS_CPP_TEST_OUT_DIR/make.stderr"
	elif [ -r KS_TEST_CPP_STL.sln ]; then
		msbuild
	else
		echo "No build makefile/project file found, unable to continue."
		ls -al
		exit 1
	fi
}

#rm -rf "$OBJ_DIR"
mkdir -p "$OBJ_DIR" "$ABS_CPP_TEST_OUT_DIR"
cd "$OBJ_DIR"

init_file_lists

init_cmake
if compile_everything; then
	# all good, compile finished
	echo DONE
else
	# try to fix up by removing some files from compilation
	compile_failures_seq || :
	echo 'FAILED, trying to resolve by linking successfully compiled things...'
	echo 'Testing ruby...'
	which ruby
	ruby --version
	if ruby "$TEST_DIR/link-cpp_stl" "." "$ABS_CPP_TEST_OUT_DIR"; then
		echo 'DONE'
	else
		echo 'FAILED'
	fi
	ls -al "$ABS_CPP_TEST_OUT_DIR"
fi

# Work around boost v1.62 bug: https://svn.boost.org/trac10/ticket/12507
# --log_sink is broken in boost v1.62, using workaround, as per
# https://stackoverflow.com/a/39999085/487064
#
# However, Travis has boost v1.54, which has problems with it, so we
# won't use the workaround on anything except exactly v1.62

if [ -r /usr/include/boost/version.hpp ] && grep -q 'BOOST_VERSION 106200' /usr/include/boost/version.hpp; then
	# Boost v1.62 detected, enabling workaround
	BOOST_LOG_OPTION=--logger=JUNIT,test_suite,"$CPP_TEST_OUT_DIR/results.xml"
else
	# No boost v1.62, we'll stick to standard which works with v1.54 too
	BOOST_LOG_OPTION=--log_sink="$CPP_TEST_OUT_DIR/results.xml"
fi

# Actually run the tests
cd "$TEST_DIR"
"$OBJ_DIR/ks_tests" \
	--log_format=XML \
	$BOOST_LOG_OPTION \
	--log_level=all \
	--report_level=detailed
